<html>
  <%- include('partials/head') %>
<body>
  <%- include('partials/header')%>

  <main>
    <div class="hero">
      <h2>Instagram photo and video downloader</h2>
      <p>Download Instagram, Photo, Video, Reels, Stories, IGTV online</p>
    </div>
    

    <form id="instagram-form" name='instagram-form' enctype="multipart/form-data" action="/api/instagram" method="post">
      <input type="url" name="url" id='url' placeholder="Enter the Instagram photo, video, reel, igtv, or profile URL" required>
      <button type="submit">Download</button>
    </form>

    <div id="data">

      <p id="message"></p>

      <div id="video" style="display:none;">
        <div class="section">
          <img id='videoProfileImage' src="" alt="">
          <h3 id="videoAccountName"></h3>
          <sub id="videoUserName"></sub>
        </div>
        <div class="section">
          <img class='videoPreviewImage' src="" alt="">
          <a id="videoDownloadLink" href="" download>Download Video</a>
        </div>
        <div class="section">
          <p id="videoCaption"></p>
        </div>
      </div>
    </div>

    <%- include('partials/features') %>
    <%- include('partials/faqs') %>

  </main>

  <%- include('partials/footer') %>
<script>

function createBaseVideoSection() {
  let videoSection = document.querySelector('#video');
  if (videoSection) {
      videoSection.remove();
  }
  videoSection = document.createElement('div');
  videoSection.setAttribute('id', 'video');
  videoSection.style.display = 'none';
  const baseHtml = `
      <div class="section profile-section">
          <img id='videoProfileImage' src="" alt="">
          <h3 id="videoAccountName"></h3>
          <sub id="videoUserName"></sub>
      </div>
      <div class="section media-section">
          <img class='videoPreviewImage' src="" alt="">
          <a id="videoDownloadLink" href="" download>Download Media</a>
      </div>
      <div class="section caption-section">
          <p id="videoCaption"></p>
      </div>
  `;
  videoSection.innerHTML = baseHtml;
  document.querySelector('#data').appendChild(videoSection);
}

function handleSingleMedia(response) {
  createBaseVideoSection();

  document.querySelector('#message').innerHTML = response.status;
  document.querySelector('#videoProfileImage').setAttribute('src', response.profile_pic);
  document.querySelector('#videoAccountName').innerHTML = response.full_name;
  document.querySelector('#videoUserName').innerHTML = '@' + response.owner;
  document.querySelector('.videoPreviewImage').setAttribute('src', response.displayUrl);
  document.querySelector('#videoDownloadLink').setAttribute('href', response.dataDownload);
  document.querySelector('#videoCaption').innerHTML = response.caption;
  document.querySelector('#video').style.display = "block";
}

function createMultipleMediaContainer() {
  let container = document.querySelector('.multiple-media-container');
  if (!container) {
      container = document.createElement('div');
      container.classList.add('multiple-media-container');
  } else {
      container.innerHTML = '';
  }
  return container;
}


function showData(response){
    switch(response.postType){
      case "SingleVideo": {
          handleSingleMedia(response);
          document.querySelector('#videoDownloadLink').setAttribute('download', response.mediaFilePrefix + ".mp4");
          const videoDownloadLink = document.getElementById('videoDownloadLink');

          videoDownloadLink.addEventListener('click', (e) => {
            e.preventDefault();
            const fileName = videoDownloadLink.getAttribute('download');
            console.log(fileName);
            downloadMedia(videoDownloadLink, fileName);
          });
      }break;
      case "SingleImage": {
          handleSingleMedia(response);
          document.querySelector('#videoDownloadLink').setAttribute('download', response.mediaFilePrefix + ".jpg");
          const videoDownloadLink = document.getElementById('videoDownloadLink');

          videoDownloadLink.addEventListener('click', (e) => {
            e.preventDefault();
            const fileName = videoDownloadLink.getAttribute('download');
            console.log(fileName);
            downloadMedia(videoDownloadLink, fileName);
          });

      }break;
      case "MultiplePost": {
          document.querySelector('#message').innerHTML = response.status;
          createBaseVideoSection();

          let mediaSection = document.querySelector('.media-section');
          if (mediaSection) {
            mediaSection.remove();
          }
        
          document.querySelector('#videoProfileImage').setAttribute('src', response.profile_pic);
          document.querySelector('#videoAccountName').innerHTML = response.full_name;
          document.querySelector('#videoUserName').innerHTML = '@' + response.owner;
          document.querySelector('#videoCaption').innerHTML = response.caption;
        
          const videoSection = document.querySelector('#video');
          const multipleMediaContainer = createMultipleMediaContainer();
          const captionSection = document.querySelector('.caption-section');
          videoSection.insertBefore(multipleMediaContainer, captionSection);          
        
          response.dataDownload.forEach((media, index) => {
              const extension = media.is_video ? '.mp4' : '.jpg';
              const section = document.createElement('div');
              section.classList.add('section');
              if(media.is_video){
                section.innerHTML = `<video class="videoPreviewImage" controls>
                  <source src="${media.placeholder_url}" type="video/mp4">
                </video>`;
              }else{
                section.innerHTML = `<img class='videoPreviewImage' src="${media.placeholder_url}" alt="">`;
              }
              section.innerHTML += `
                  <a class='mediaDownloadLink' href="${media.placeholder_url}" download="${response.mediaFilePrefix}-${index}${extension}">Download ${media.is_video ? 'Video' : 'Image'}</a>
              `;
          
              multipleMediaContainer.appendChild(section);
          });

           // Add event listeners for the download links
           document.querySelectorAll('.mediaDownloadLink').forEach((mediaDownloadLink, index) => {
            mediaDownloadLink.addEventListener('click', (e) => {
              e.preventDefault();
              e.stopPropagation();
              const fileName = mediaDownloadLink.getAttribute('download');
              downloadMedia(mediaDownloadLink.href, fileName);
            });
          });
        
          videoSection.style.display = "block";
      }break;    
      default:{
        document.querySelector('#message').innerHTML = response.message;
      }
    }
}

function sendRequest(formData){
  fetch('/api/instagram', {
    method: 'POST',
    body: formData,
  })
  .then(response => response.json())
  .then(response => {
      console.log('Using server response');
      // Cache the response with a timestamp
      //const cache = {
      //  timestamp: new Date().getTime(),
      //  response: response
      //};
      //localStorage.setItem(cacheKey, JSON.stringify(cache));
      console.log(response);
      showdata.style.display = "block";
      showData(response);
  });
}

// Instagram form
const instagramForm = document.getElementById("instagram-form");
// Get the parent element
const showdata = document.querySelector("#data");

instagramForm.addEventListener("submit", (event) => {
  event.preventDefault();
  
  // hide the data display
  // Get all the child elements and loop through each child element and hide it
  showdata.style.display = "none";
  const directChild = showdata.querySelectorAll('#data > div');
  for (let i = 0; i < directChild.length; i++) {
    directChild[i].style.display = "none";
  }

  const formData = new FormData(document.getElementById("instagram-form"));
  console.log("Value: " + document.getElementById('url').value);
  console.log("Form Data url: " + formData.get('url'));
  console.log("FormData: " + formData);
  
  // Check if the form data is already in cache
  //const cacheKey = JSON.stringify([...formData.entries()]);
  //const cachedResponse = localStorage.getItem(cacheKey);
  //
  //if (cachedResponse) {
  //   // Check if cached data is present
  //  const cache = JSON.parse(cachedResponse);
  //  const cacheTime = cache.timestamp;
  //  const currentTime = new Date().getTime();
  //  const hourInMilliseconds = 3600000;
  //  if (currentTime - cacheTime < hourInMilliseconds) {
  //    // Use cached data has not expired (1 hour)
  //    console.log('Using cached response');
  //    const response = cache.response;
  //    // Do something with the cached response
  //    showData(response);
  //  } else {
  //    // Cached data has expired, send a new request to the server
  //    console.log('Cached data has expired');
  //    sendRequest(formData);
  //  }
  //  
  //}
  //else{
  //  // No cached data found, send a new request to the server
  //  console.log('No cached data found');
  //  sendRequest(formData);
  //}
  sendRequest(formData);
});
  
function downloadMedia(href, fileName) {
  const fileType = fileName.endsWith('.mp4') ? 'video/mp4' : 'image/jpg';
  const xhr = new XMLHttpRequest();
  xhr.open('GET', href, true);
  xhr.responseType = 'blob';
  xhr.onload = function() {
    if (this.status === 200) {
      const blob = new Blob([this.response], { type: fileType });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = fileName;
      document.body.appendChild(a);
      a.click();
      setTimeout(() => {
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }, 100);
    } else {
      console.error('Error downloading file');
    }
  };
  xhr.send();
}
  
</script>
</body>
</html>
